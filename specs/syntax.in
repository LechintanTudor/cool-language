<expr> ::= <ident>
         | <primitive_lit>
         | <array_lit>
         | <expr><op><expr>

<type> ::= <primitive> | <array_type>

// [12]i32
<array_type> ::= [<int_lit>]<type>

// 1, 2, 3
<array_lit_content> ::= <expr>
                      | <expr>, <array_lit_content>

// [1, 2, 3, 4]
// [1, 2, 3, 4,] <- Trailing commas are allowed
<array_lit> ::= [<array_lit_content>]
              | [<array_lit_content>,]

// name: str = "John";
<decl_explicit> ::= <ident>: <type> = <expr>;

// name := "John"; <- variable type is inferred from the assigned expression
<decl_inferred> ::= <ident> := <expr>;

<decl> ::= <decl_explicit> | <decl_inferred>

// a = 10 + 10;
<assign> ::= <ident> = <expr>;

// if condition { write("yes"); }
// if condition { write("yes"); } else { write("no"); }
<if> ::= if <expr> { <stmt_list> }
       | if <expr> { <stmt_list> } else { <stmt_list> }
       
// while condition { write("looping"); }
<while> ::= while <expr> { <stmt_list> }

<stmt> ::= <decl> 
         | <assign>
         | <if>
         | <while>

<stmt_list> ::= (nothing) 
              | <stmt>
              | <stmt><stmt_list>

// a := 0;
// read(a);
// 
// while a > 0 {
//     write(a);
//     a = a - 1;
// }
// 
// write("Finished");
<program> ::= <stmt_list>
