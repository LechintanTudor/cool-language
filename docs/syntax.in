<expression> ::= <identifier>
               | <integer_literal>
               | <bool_literal>
               | <char_literal>
               | <string_literal>
               | <array_literal>
               | <expression><operator><expression>

<type> ::= <primitive> | <array_type>

// 12
<array_size> ::= <signless_non_zero_integer>

// [12]i32
<array_type> ::= [<array_size>]<type>

// 1, 2, 3
<array_literal_content> ::= <expression>
                          | <expression>, <array_literal_content>

// [1, 2, 3, 4]
// [1, 2, 3, 4,] <- Trailing commas are allowed
<array_literal> ::= [<array_literal_content>]
                  | [<array_literal_content>,]

// name: str = "John";
<declaration_explicit> ::= <identifier>: <type> = <expression>;

// name := "John"; <- variable type is inferred from the assigned expression
<declaration_inferred> ::= <identifier> := <expression>;

<declaration> ::= <declaration_explicit> | <declaration_inferred>

// a = 10 + 10;
<assignment> ::= <identifier> = <expression>;

// read(a);
<read> ::= read(<identifier>);

// write(100);
<write> ::= write(<expression>);

// if condition { write("yes"); }
// if condition { write("yes"); } else { write("no"); }
<if> ::= if <expression> { <statement_list> }
       | if <expression> { <statement_list> } else { <statement_list> }
       
// while condition { write("looping"); }
<while> ::= while <expression> { <statement_list> }

<statement> ::= <declaration> 
              | <assignment>
              | <read>
              | <write>
              | <if>
              | <while>

<statement_list> ::= "" (nothing) 
                   | <statement>
                   | <statement><statement_list>

// a := 0;
// read(a);
// 
// while a > 0 {
//     write(a);
//     a = a - 1;
// }
// 
// write("Finished");
<program> ::= <statement_list>