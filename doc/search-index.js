var searchIndex = JSON.parse('{\
"compiler":{"doc":"","t":[5,0,0,0,13,13,4,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,17,6,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,5,5,5],"n":["main","symbol","symbol_table","utils","Bool","Char","Const","Const","I32","Ident","String","Symbol","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","hash_code","hash_code","into","into","ne","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","SYMBOL_TABLE_MAX_LOAD_FACTOR","SymbolSlot","SymbolTable","SymbolTableIter","SymbolTuple","borrow","borrow","borrow_mut","borrow_mut","contains","default","fmt","from","from","get","grow","insert","into","into","into_iter","is_empty","iter","len","len","load_factor","next","should_grow","slots","try_from","try_from","try_into","try_into","type_id","type_id","values","hash_str","is_prime","next_prime"],"q":["compiler","","","","compiler::symbol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","compiler::symbol::Const","","","","compiler::symbol::Symbol","","compiler::symbol_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","compiler::utils","",""],"d":["","Constans and identifiers that may be saved in a SymbolTable…","Symbol table for storing constans and identifiers.","Various utility functions.","Boolean constant.","Unicode scalar constant.","Constant that can be stored in a SymbolTable.","Constant.","32-bit integer constant.","Identifier.","String constant.","Identifier or constant that can be stored in a SymbolTable.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the hash code of the constant.","Returns the hash code of the symbol.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Max load factor before the SymbolTable resizes.","Slot for storing a Symbol.","Hashmap-based symbol table.","Iterator over all symbols in the table and their …","Symbol and associated code.","","","","","Returns whether the table contains a symbol.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the code associated to the symbol, if it exists.","Grows the hash table.","Inserts a symbol into the table if it doesn’t exist …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns whether the table is empty.","Returns an iterator over all symbols in the table and …","Returns the number of symbols in the table.","","Returns the load factor of the hash table.","","Returns whether the table should grow before inserting a …","Returns the number of symbol slots available.","","","","","","","","Hashes the given string.","Returns whether <code>n</code> is prime.","Returns the next prime number greater than or equal to <code>n</code>."],"i":[0,0,0,0,1,1,0,2,1,2,1,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,15,16,17,18,19,20,12,0,0,0,0,0,12,9,12,9,9,9,9,12,9,9,9,9,12,9,12,9,9,9,9,9,12,9,9,12,9,12,9,12,9,9,0,0,0],"f":[[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[1,4],5],[[2,4],5],[[]],[[]],[1,6],[2,6],[[]],[[]],[[1,1],3],[[2,2],3],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[9,2],3],[[],9],[[9,4],5],[[]],[[]],[[9,2],[[11,[10]]]],[9],[[9,2],10],[[]],[[]],[[]],[9,3],[9,12],[9,10],0,[9,13],[12,11],[9,3],[9,10],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,[14,6],[10,3],[10,10]],"p":[[4,"Const"],[4,"Symbol"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[4,"Result"],[3,"TypeId"],[3,"SymbolTable"],[15,"usize"],[4,"Option"],[3,"SymbolTableIter"],[15,"f64"],[15,"str"],[13,"I32"],[13,"Char"],[13,"Bool"],[13,"String"],[13,"Ident"],[13,"Const"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
